import os

from aiogram import types, Router, F, html
from aiogram.fsm.context import FSMContext


from .utils import Storage, check_user
from menu.menu import (
    all_menu,
    other_menu,
    main_menu,
    my_menu,
)

form_router = Router()


async def cancellation_message(message, state):
    await state.clear()
    await message.answer(
        "–û–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=my_menu,
    )


# @form_router.message(Command("w"))
@form_router.message(F.text == 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
async def message_ls(message: types.Message, state: FSMContext):
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ —Å–ª–æ–≤–æ –í–°–ï–ú –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=all_menu,
    )
    await state.set_state(Storage.id_or_all)


# @form_router.message('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
# @form_router.message(F.text.casefold() == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô')
# # @form_router.message(F.text.casefold() == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô')
# async def to_menu(message: types.Message, state: FSMContext):
#     await state.clear()
#     await message.answer(
#         "–û–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
#         reply_markup=my_menu,
#     )


@form_router.message(Storage.id_or_all)
async def input_mesage(message: types.Message, state: FSMContext):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô':
        await cancellation_message(message, state)
    elif await check_user(message.text) is False:
        await message.answer(
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
            reply_markup=my_menu,
        )
        await state.clear()
    else:
        await state.update_data(id_or_all=message.text)
        await state.set_state(Storage.text)
        await message.answer(
            '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
            reply_markup=main_menu
        )


@form_router.message(Storage.text)
async def input_confirmation(message: types.Message, state: FSMContext):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô':
        await cancellation_message(message, state)
    else:
        await state.update_data(text=message.text)
        await state.set_state(Storage.confirmation)
        await message.answer(
            '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É',
            reply_markup=other_menu
        )


@form_router.message(Storage.confirmation)
async def message_sending(message: types.Message, state: FSMContext):
    if message.text == 'n//–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô':
        await cancellation_message(message, state)
    elif message.text == 'Y':
        data = await state.update_data(confirmation=message.text)
        await state.clear()
        await sending(message=message, data=data)


async def sending(message: types.Message, data):
    text = f'''
    id = {html.quote(data['id_or_all'])}
    text ={html.quote(data['text'])}
    '''
    await message.answer(text=text, reply_markup=my_menu)



